AWSTemplateFormatVersion: '2010-09-09'
Description: Basic stack for Lambdas, API Gateway, and S3 buckets (frontend + storage)

Resources:

  # Frontend S3 Bucket (static website hosting)
  FrontendBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "frontend-bucket-${AWS::AccountId}-${AWS::Region}"
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
      AccessControl: PublicRead
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false

  # Storage S3 Bucket (for uploaded files)
  StorageBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "storage-bucket-${AWS::AccountId}-${AWS::Region}"
  
  # IAM Role for Lambda Functions
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "lambda-execution-role-${AWS::StackName}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: lambda-logs-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                Resource: "*"

  # First Lambda function
  LambdaFunction1:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "lambda-function-1-${AWS::StackName}"
      Handler: index.handler
      Runtime: python3.11
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          def handler(event, context):
              return {
                  'statusCode': 200,
                  'body': json.dumps('Hello from Lambda 1!')
              }

  # Second Lambda function
  LambdaFunction2:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "lambda-function-2-${AWS::StackName}"
      Handler: index.handler
      Runtime: python3.11
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          def handler(event, context):
              return {
                  'statusCode': 200,
                  'body': json.dumps('Hello from Lambda 2!')
              }

  # API Gateway REST API
  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub "api-gateway-${AWS::StackName}"
  
  # API Gateway Resource
  ApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: lambda1
      RestApiId: !Ref ApiGatewayRestApi

  # API Gateway Method (GET for Lambda 1)
  ApiGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref ApiGatewayResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
          - { Region: !Ref "AWS::Region", LambdaArn: !GetAtt LambdaFunction1.Arn }

  # API Gateway Deployment
  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: ApiGatewayMethod
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      StageName: prod

  # Lambda Permission to allow API Gateway to invoke Lambda
  LambdaPermissionApiGateway:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaFunction1
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/*/*"

Outputs:

  FrontendBucketURL:
    Description: "Public URL of Frontend S3 Static Website"
    Value: !Sub "http://${FrontendBucket}.s3-website-${AWS::Region}.amazonaws.com/"

  FrontendBucketName:
    Description: "Name of the Frontend S3 Bucket"
    Value: !Ref FrontendBucket

  StorageBucketName:
    Description: "Name of the Storage S3 Bucket"
    Value: !Ref StorageBucket

  Lambda1Name:
    Description: "First Lambda Function Name"
    Value: !Ref LambdaFunction1

  Lambda2Name:
    Description: "Second Lambda Function Name"
    Value: !Ref LambdaFunction2

  ApiGatewayInvokeURL:
    Description: "API Gateway Base Invoke URL"
    Value: !Sub "https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/prod/lambda1"
